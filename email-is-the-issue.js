// Generated by CoffeeScript 1.10.0
var APP, App, GITHUB, GITHUB_LABEL_NAME, GMAIL_LABEL, GMAIL_LABEL_NAME, Github;

Github = (function() {
  function Github(personalAccessToken) {
    this.personalAccessToken = personalAccessToken;
  }

  Github.prototype.post = function(url, payload) {
    var auth, fullUrl, password, username;
    fullUrl = "https://api.github.com" + url;
    username = this.personalAccessToken;
    password = 'x-oauth-basic';
    auth = "Basic " + Utilities.base64Encode(username + ":" + password);
    return JSON.parse(UrlFetchApp.fetch(fullUrl, {
      method: 'post',
      headers: {
        Authorization: auth
      },
      payload: JSON.stringify(payload)
    }));
  };

  return Github;

})();

App = (function() {
  function App(user, repo) {
    this.user = user;
    this.userRepo = user + "/" + repo;
    this.props = PropertiesService.getScriptProperties();
  }

  App.prototype.checkOldThreadsForUpdates = function(howManyThreads) {
    var i, len, lock, ref, thread;
    lock = LockService.getScriptLock();
    lock.waitLock(5000);
    ref = GMAIL_LABEL.getThreads(0, howManyThreads);
    for (i = 0, len = ref.length; i < len; i++) {
      thread = ref[i];
      this.createIssueCommentsFromMessages(thread);
    }
    lock.releaseLock();
  };

  App.prototype.checkNewThreads = function(howManyThreads) {
    var i, len, lock, thread, threads;
    lock = LockService.getScriptLock();
    lock.waitLock(5000);
    threads = GmailApp.search("in:inbox -list:email." + this.user + ".github.com -label:\"" + GMAIL_LABEL_NAME + "\"");
    threads.reverse();
    for (i = 0, len = threads.length; i < len; i++) {
      thread = threads[i];
      if (howManyThreads <= 0) {
        break;
      }
      howManyThreads -= 1;
      this.createIssueFromThread(thread);
      this.createIssueCommentsFromMessages(thread);
    }
    lock.releaseLock();
  };

  App.prototype.createIssueFromThread = function(thread) {
    var issue, threadProps;
    threadProps = this.getThreadProps(thread);
    issue = GITHUB.post("/repos/" + this.userRepo + "/issues", {
      title: thread.getMessages()[0].getSubject(),
      body: "[View thread " + (thread.getId()) + " in Gmail](" + (thread.getPermalink()) + ")",
      labels: [GITHUB_LABEL_NAME]
    });
    threadProps.githubIssueId = issue.number;
    threadProps.convertedMessages = {};
    this.setThreadProps(thread, threadProps);
    thread.addLabel(GMAIL_LABEL);
  };

  App.prototype.getThreadProps = function(thread) {
    var key, rawThreadProps, threadProps;
    key = "thread-" + (thread.getId());
    rawThreadProps = this.props.getProperty(key);
    threadProps = rawThreadProps != null ? JSON.parse(rawThreadProps) : {};
    if (threadProps.githubIssueId == null) {
      threadProps.githubIssueId = null;
    }
    if (threadProps.convertedMessages == null) {
      threadProps.convertedMessages = {};
    }
    return threadProps;
  };

  App.prototype.setThreadProps = function(thread, props) {
    var key;
    key = "thread-" + (thread.getId());
    return this.props.setProperty(key, JSON.stringify(props));
  };

  App.prototype.createIssueCommentsFromMessages = function(thread) {
    var formatElse, formatList, formattedMessage, i, issueComment, len, message, messageId, ref, threadProps;
    threadProps = this.getThreadProps(thread);
    Logger.log(threadProps);
    if (threadProps.githubIssueId == null) {
      Logger.log("WARN thread " + (thread.getId()) + " has \"" + GMAIL_LABEL_NAME + "\" Gmail label but no associated GitHub issue");
      return;
    }
    ref = thread.getMessages();
    for (i = 0, len = ref.length; i < len; i++) {
      message = ref[i];
      messageId = message.getId();
      if (messageId in threadProps.convertedMessages) {
        continue;
      }
      formatList = function(pre, list) {
        if (list.length > 0) {
          return ("**" + pre + ":** " + list + "\n").replace(/</g, '\\<');
        } else {
          return "";
        }
      };
      formatElse = function(pre, list) {
        return ("**" + pre + ":** " + list + "\n").replace(/</g, '\\<');
      };
      formattedMessage = formatElse('From', message.getFrom()) + formatElse('To', message.getTo()) + formatList('Cc', message.getCc()) + formatList('Bcc', message.getBcc()) + formatElse('Date', message.getDate()) + "\n---\n" + ("**" + (message.getSubject()) + "**") + "\n\n" + ("" + (message.getBody().replace(/\n/g, '')));
      issueComment = GITHUB.post("/repos/" + this.userRepo + "/issues/" + threadProps.githubIssueId + "/comments", {
        body: formattedMessage
      });
      threadProps.convertedMessages[messageId] = issueComment.id;
      Logger.log(threadProps);
      this.setThreadProps(thread, threadProps);
    }
  };

  return App;

})();

GMAIL_LABEL_NAME = "added to GitHub";

GMAIL_LABEL = GmailApp.getUserLabelByName(GMAIL_LABEL_NAME);

GITHUB_LABEL_NAME = "from-email";

GITHUB = new Github('YOUR_API_KEY_HERE');

APP = new App('SplashBerkeley', 'email');


function main() {
  APP.checkOldThreadsForUpdates(15);
  APP.checkNewThreads(15);
};

function deleteAllThreadProps() {
  return this.props = PropertiesService.getScriptProperties().deleteAllProperties();
};
